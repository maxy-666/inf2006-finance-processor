<?php
// textract_frontend_index.php
// Single-file PHP app that accepts an uploaded image (jpg/png) or PDF (images only recommended here),
// uploads to S3, calls Amazon Textract (synchronous DetectDocumentText for images), and returns JSON
// Frontend (below) displays the detected text in a table.

// Requirements:
// 1) Install AWS SDK for PHP: composer require aws/aws-sdk-php
// 2) Configure AWS credentials and region using environment variables, ~/.aws/credentials, or IAM role.
// 3) Ensure the IAM role/user has permissions: s3:PutObject, s3:GetObject, textract:DetectDocumentText (or StartDocumentTextDetection for async PDF processing).

// IMPORTANT:
// - This example uses DetectDocumentText which is synchronous and works for images (PNG/JPG). For multi-page PDFs
//   you should use StartDocumentTextDetection (async) and a job completion notification (SNS) or polling.
// - Keep production security in mind: validate file types and sizes, apply authentication, and use temporary credentials.

require __DIR__ . '/vendor/autoload.php';

// --- Configuration (VARIABLES TO EDIT!!!) ---


$S3_BUCKET = getenv('TEXTRACT_S3_BUCKET') ?: 'your-textract-bucket'; #rename to name of bucket
$AWS_REGION = getenv('AWS_REGION') ?: 'us-east-1'; # this should still remain us-east-1 instead of 1a/1b cause textract and S3 are only regional
// ----------------------------------------------------


use Aws\S3\S3Client;
use Aws\Textract\TextractClient;
use Aws\Exception\AwsException;

// Simple router: if POST with file => handle upload + Textract; else render HTML frontend
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['document'])) {
    header('Content-Type: application/json');

    $file = $_FILES['document'];
    if ($file['error'] !== UPLOAD_ERR_OK) {
        http_response_code(400);
        echo json_encode(['error' => 'Upload error: ' . $file['error']]);
        exit;
    }

    // Basic validation (file size and type)
    $allowedMime = ['image/png', 'image/jpeg', 'application/pdf'];
    $finfo = finfo_open(FILEINFO_MIME_TYPE);
    $mime = finfo_file($finfo, $file['tmp_name']);
    finfo_close($finfo);

    if (!in_array($mime, $allowedMime)) {
        http_response_code(400);
        echo json_encode(['error' => 'Unsupported file type. Use PNG / JPG / PDF. Detected: ' . $mime]);
        exit;
    }

    // Create unique name
    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
    $key = 'uploads/' . uniqid('doc_', true) . '.' . ($ext ?: 'bin');

    // Initialize S3 client
    $s3 = new S3Client([
        'version' => 'latest',
        'region' => $AWS_REGION,
    ]);

    // Upload file to S3
    try {
        $s3->putObject([
            'Bucket' => $S3_BUCKET,
            'Key' => $key,
            'SourceFile' => $file['tmp_name'],
            'ACL' => 'private',
        ]);
    } catch (AwsException $e) {
        http_response_code(500);
        echo json_encode(['error' => 'S3 upload failed: ' . $e->getMessage()]);
        exit;
    }

    // Initialize Textract client
    $textract = new TextractClient([
        'version' => 'latest',
        'region' => $AWS_REGION,
    ]);

    // For images, call DetectDocumentText synchronously using S3 object reference
    if ($mime === 'image/png' || $mime === 'image/jpeg') {
        try {
            $result = $textract->detectDocumentText([
                'Document' => [
                    'S3Object' => [
                        'Bucket' => $S3_BUCKET,
                        'Name' => $key,
                    ],
                ],
            ]);

            // Parse blocks to extract lines
            $lines = [];
            if (isset($result['Blocks']) && is_array($result['Blocks'])) {
                foreach ($result['Blocks'] as $b) {
                    if (isset($b['BlockType']) && $b['BlockType'] === 'LINE') {
                        $lines[] = [
                            'text' => $b['Text'] ?? '',
                            'confidence' => isset($b['Confidence']) ? round($b['Confidence'], 2) : null,
                        ];
                    }
                }
            }

            echo json_encode([
                's3_key' => $key,
                'bucket' => $S3_BUCKET,
                'lines' => $lines,
            ]);
            exit;

        } catch (AwsException $e) {
            http_response_code(500);
            echo json_encode(['error' => 'Textract failed: ' . $e->getMessage()]);
            exit;
        }
    }

    // If PDF: in production use StartDocumentTextDetection (async). Here we return a helpful message.
    if ($mime === 'application/pdf') {
        // Example: kick off async job (not implemented fully here). For now, tell the client the file is uploaded.
        echo json_encode([
            's3_key' => $key,
            'bucket' => $S3_BUCKET,
            'message' => 'PDF uploaded. For multi-page PDF processing use StartDocumentTextDetection (async). See comments in the PHP file.'
        ]);
        exit;
    }

    // Fallback
    http_response_code(400);
    echo json_encode(['error' => 'Unhandled file type']);
    exit;
}

// If not POST, render a simple HTML frontend
?>
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Upload Document → AWS Textract Viewer</title>
  <style>
    body { font-family: system-ui, -apple-system, 'Segoe UI', Roboto, Arial; max-width:1000px; margin:2rem auto; padding:1rem; }
    .card { border:1px solid #e5e7eb; padding:1rem; border-radius:8px; box-shadow: 0 1px 3px rgba(0,0,0,0.04); }
    table { width:100%; border-collapse:collapse; margin-top:1rem; }
    th, td { padding:8px; border-bottom:1px solid #eee; text-align:left; }
    .muted { color:#6b7280; }
    #preview { max-width:100%; margin-top:10px; }
    #loader { display:none; }
  </style>
</head>
<body>
  <h1>AWS Textract — Upload & View OCR</h1>
  <div class="card">
    <p class="muted">Choose an image (PNG/JPG) for synchronous OCR. PDFs are uploaded but require async processing (not handled here).</p>
    <form id="uploadForm">
      <input type="file" id="fileInput" name="document" accept="image/*,application/pdf" required />
      <div style="margin-top:8px">
        <button type="submit">Upload & Extract</button>
        <span id="loader">Processing…</span>
      </div>
    </form>

    <img id="preview" alt="preview" />

    <div id="result"></div>
  </div>

  <script>
    const form = document.getElementById('uploadForm');
    const fileInput = document.getElementById('fileInput');
    const preview = document.getElementById('preview');
    const resultDiv = document.getElementById('result');
    const loader = document.getElementById('loader');

    fileInput.addEventListener('change', (e) => {
      const f = e.target.files[0];
      if (!f) return;
      if (f.type.startsWith('image/')) {
        const url = URL.createObjectURL(f);
        preview.src = url;
        preview.style.display = 'block';
      } else {
        preview.style.display = 'none';
      }
    });

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const f = fileInput.files[0];
      if (!f) return alert('Choose a file first');

      loader.style.display = 'inline';
      resultDiv.innerHTML = '';

      const formData = new FormData();
      formData.append('document', f);

      try {
        const res = await fetch('', { method: 'POST', body: formData });
        const json = await res.json();
        loader.style.display = 'none';

        if (!res.ok) {
          resultDiv.innerHTML = `<pre style="color:red">${JSON.stringify(json, null, 2)}</pre>`;
          return;
        }

        // If Textract returned lines, render them in a table
        if (json.lines && Array.isArray(json.lines)) {
          let html = `<h3>Detected lines</h3>`;
          html += `<table><thead><tr><th>#</th><th>Text</th><th>Confidence</th></tr></thead><tbody>`;
          json.lines.forEach((l, i) => {
            html += `<tr><td>${i+1}</td><td>${escapeHtml(l.text)}</td><td>${l.confidence ?? ''}</td></tr>`;
          });
          html += `</tbody></table>`;
          resultDiv.innerHTML = html;
        } else if (json.message) {
          resultDiv.innerHTML = `<pre>${escapeHtml(json.message)}</pre>`;
        } else {
          resultDiv.innerHTML = `<pre>${escapeHtml(JSON.stringify(json, null, 2))}</pre>`;
        }

      } catch (err) {
        loader.style.display = 'none';
        resultDiv.innerHTML = `<pre style="color:red">${err}</pre>`;
      }
    });

    function escapeHtml(str) {
      if (!str) return '';
      return str.replace(/[&<>"']/g, function (c) { return {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":"&#39;"}[c]; });
    }
  </script>

  <hr style="margin-top:2rem">
  <div class="muted">Notes: This is a minimal demo. For a production app consider adding authentication, file type/size limits, and server-side validation. To process invoices/tables more accurately, consider using Textract's AnalyzeDocument with feature types like TABLES and FORM to get structured table blocks.</div>
</body>
</html>
